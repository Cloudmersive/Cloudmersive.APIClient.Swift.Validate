// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [AddressGetServersResponse]
            Decoders.addDecoder(clazz: [AddressGetServersResponse].self) { (source: AnyObject) -> [AddressGetServersResponse] in
                return Decoders.decode(clazz: [AddressGetServersResponse].self, source: source)
            }
            // Decoder for AddressGetServersResponse
            Decoders.addDecoder(clazz: AddressGetServersResponse.self) { (source: AnyObject) -> AddressGetServersResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressGetServersResponse()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Success"])
                instance.servers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Servers"])
                return instance
            }


            // Decoder for [AddressVerifySyntaxOnlyResponse]
            Decoders.addDecoder(clazz: [AddressVerifySyntaxOnlyResponse].self) { (source: AnyObject) -> [AddressVerifySyntaxOnlyResponse] in
                return Decoders.decode(clazz: [AddressVerifySyntaxOnlyResponse].self, source: source)
            }
            // Decoder for AddressVerifySyntaxOnlyResponse
            Decoders.addDecoder(clazz: AddressVerifySyntaxOnlyResponse.self) { (source: AnyObject) -> AddressVerifySyntaxOnlyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressVerifySyntaxOnlyResponse()
                instance.validAddress = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ValidAddress"])
                return instance
            }


            // Decoder for [CheckResponse]
            Decoders.addDecoder(clazz: [CheckResponse].self) { (source: AnyObject) -> [CheckResponse] in
                return Decoders.decode(clazz: [CheckResponse].self, source: source)
            }
            // Decoder for CheckResponse
            Decoders.addDecoder(clazz: CheckResponse.self) { (source: AnyObject) -> CheckResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CheckResponse()
                instance.validDomain = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ValidDomain"])
                return instance
            }


            // Decoder for [FirstNameValidationRequest]
            Decoders.addDecoder(clazz: [FirstNameValidationRequest].self) { (source: AnyObject) -> [FirstNameValidationRequest] in
                return Decoders.decode(clazz: [FirstNameValidationRequest].self, source: source)
            }
            // Decoder for FirstNameValidationRequest
            Decoders.addDecoder(clazz: FirstNameValidationRequest.self) { (source: AnyObject) -> FirstNameValidationRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FirstNameValidationRequest()
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"])
                return instance
            }


            // Decoder for [FirstNameValidationResponse]
            Decoders.addDecoder(clazz: [FirstNameValidationResponse].self) { (source: AnyObject) -> [FirstNameValidationResponse] in
                return Decoders.decode(clazz: [FirstNameValidationResponse].self, source: source)
            }
            // Decoder for FirstNameValidationResponse
            Decoders.addDecoder(clazz: FirstNameValidationResponse.self) { (source: AnyObject) -> FirstNameValidationResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FirstNameValidationResponse()
                instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Successful"])
                instance.validationResult = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ValidationResult"])
                return instance
            }


            // Decoder for [FullEmailValidationResponse]
            Decoders.addDecoder(clazz: [FullEmailValidationResponse].self) { (source: AnyObject) -> [FullEmailValidationResponse] in
                return Decoders.decode(clazz: [FullEmailValidationResponse].self, source: source)
            }
            // Decoder for FullEmailValidationResponse
            Decoders.addDecoder(clazz: FullEmailValidationResponse.self) { (source: AnyObject) -> FullEmailValidationResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FullEmailValidationResponse()
                instance.validAddress = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ValidAddress"])
                instance.mailServerUsedForValidation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MailServerUsedForValidation"])
                instance.validSyntax = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Valid_Syntax"])
                instance.validDomain = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Valid_Domain"])
                instance.validSMTP = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Valid_SMTP"])
                instance.isCatchallDomain = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IsCatchallDomain"])
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Domain"])
                return instance
            }


            // Decoder for [FullNameValidationRequest]
            Decoders.addDecoder(clazz: [FullNameValidationRequest].self) { (source: AnyObject) -> [FullNameValidationRequest] in
                return Decoders.decode(clazz: [FullNameValidationRequest].self, source: source)
            }
            // Decoder for FullNameValidationRequest
            Decoders.addDecoder(clazz: FullNameValidationRequest.self) { (source: AnyObject) -> FullNameValidationRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FullNameValidationRequest()
                instance.fullNameString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FullNameString"])
                return instance
            }


            // Decoder for [FullNameValidationResponse]
            Decoders.addDecoder(clazz: [FullNameValidationResponse].self) { (source: AnyObject) -> [FullNameValidationResponse] in
                return Decoders.decode(clazz: [FullNameValidationResponse].self, source: source)
            }
            // Decoder for FullNameValidationResponse
            Decoders.addDecoder(clazz: FullNameValidationResponse.self) { (source: AnyObject) -> FullNameValidationResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FullNameValidationResponse()
                instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Successful"])
                instance.validationResultFirstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ValidationResult_FirstName"])
                instance.validationResultLastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ValidationResult_LastName"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Title"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"])
                instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["MiddleName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastName"])
                instance.nickName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NickName"])
                instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Suffix"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DisplayName"])
                return instance
            }


            // Decoder for [GeolocateResponse]
            Decoders.addDecoder(clazz: [GeolocateResponse].self) { (source: AnyObject) -> [GeolocateResponse] in
                return Decoders.decode(clazz: [GeolocateResponse].self, source: source)
            }
            // Decoder for GeolocateResponse
            Decoders.addDecoder(clazz: GeolocateResponse.self) { (source: AnyObject) -> GeolocateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GeolocateResponse()
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CountryCode"])
                instance.countryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CountryName"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["City"])
                instance.regionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RegionCode"])
                instance.regionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RegionName"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ZipCode"])
                instance.timezoneStandardName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["TimezoneStandardName"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["Longitude"])
                return instance
            }


            // Decoder for [GetGenderRequest]
            Decoders.addDecoder(clazz: [GetGenderRequest].self) { (source: AnyObject) -> [GetGenderRequest] in
                return Decoders.decode(clazz: [GetGenderRequest].self, source: source)
            }
            // Decoder for GetGenderRequest
            Decoders.addDecoder(clazz: GetGenderRequest.self) { (source: AnyObject) -> GetGenderRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetGenderRequest()
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["FirstName"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CountryCode"])
                return instance
            }


            // Decoder for [GetGenderResponse]
            Decoders.addDecoder(clazz: [GetGenderResponse].self) { (source: AnyObject) -> [GetGenderResponse] in
                return Decoders.decode(clazz: [GetGenderResponse].self, source: source)
            }
            // Decoder for GetGenderResponse
            Decoders.addDecoder(clazz: GetGenderResponse.self) { (source: AnyObject) -> GetGenderResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetGenderResponse()
                instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Successful"])
                instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Gender"])
                return instance
            }


            // Decoder for [LastNameValidationRequest]
            Decoders.addDecoder(clazz: [LastNameValidationRequest].self) { (source: AnyObject) -> [LastNameValidationRequest] in
                return Decoders.decode(clazz: [LastNameValidationRequest].self, source: source)
            }
            // Decoder for LastNameValidationRequest
            Decoders.addDecoder(clazz: LastNameValidationRequest.self) { (source: AnyObject) -> LastNameValidationRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LastNameValidationRequest()
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LastName"])
                return instance
            }


            // Decoder for [LastNameValidationResponse]
            Decoders.addDecoder(clazz: [LastNameValidationResponse].self) { (source: AnyObject) -> [LastNameValidationResponse] in
                return Decoders.decode(clazz: [LastNameValidationResponse].self, source: source)
            }
            // Decoder for LastNameValidationResponse
            Decoders.addDecoder(clazz: LastNameValidationResponse.self) { (source: AnyObject) -> LastNameValidationResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LastNameValidationResponse()
                instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Successful"])
                instance.validationResult = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ValidationResult"])
                return instance
            }


            // Decoder for [PhoneNumberValidateRequest]
            Decoders.addDecoder(clazz: [PhoneNumberValidateRequest].self) { (source: AnyObject) -> [PhoneNumberValidateRequest] in
                return Decoders.decode(clazz: [PhoneNumberValidateRequest].self, source: source)
            }
            // Decoder for PhoneNumberValidateRequest
            Decoders.addDecoder(clazz: PhoneNumberValidateRequest.self) { (source: AnyObject) -> PhoneNumberValidateRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumberValidateRequest()
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PhoneNumber"])
                instance.defaultCountryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DefaultCountryCode"])
                return instance
            }


            // Decoder for [PhoneNumberValidationResponse]
            Decoders.addDecoder(clazz: [PhoneNumberValidationResponse].self) { (source: AnyObject) -> [PhoneNumberValidationResponse] in
                return Decoders.decode(clazz: [PhoneNumberValidationResponse].self, source: source)
            }
            // Decoder for PhoneNumberValidationResponse
            Decoders.addDecoder(clazz: PhoneNumberValidationResponse.self) { (source: AnyObject) -> PhoneNumberValidationResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumberValidationResponse()
                instance.isValid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IsValid"])
                instance.successful = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Successful"])
                instance.phoneNumberType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PhoneNumberType"])
                instance.e164Format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["E164Format"])
                instance.internationalFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["InternationalFormat"])
                instance.nationalFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NationalFormat"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CountryCode"])
                instance.countryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CountryName"])
                return instance
            }


            // Decoder for [VatLookupRequest]
            Decoders.addDecoder(clazz: [VatLookupRequest].self) { (source: AnyObject) -> [VatLookupRequest] in
                return Decoders.decode(clazz: [VatLookupRequest].self, source: source)
            }
            // Decoder for VatLookupRequest
            Decoders.addDecoder(clazz: VatLookupRequest.self) { (source: AnyObject) -> VatLookupRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VatLookupRequest()
                instance.vatCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["VatCode"])
                return instance
            }


            // Decoder for [VatLookupResponse]
            Decoders.addDecoder(clazz: [VatLookupResponse].self) { (source: AnyObject) -> [VatLookupResponse] in
                return Decoders.decode(clazz: [VatLookupResponse].self, source: source)
            }
            // Decoder for VatLookupResponse
            Decoders.addDecoder(clazz: VatLookupResponse.self) { (source: AnyObject) -> VatLookupResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VatLookupResponse()
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CountryCode"])
                instance.vatNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["VatNumber"])
                instance.isValid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IsValid"])
                instance.businessName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BusinessName"])
                instance.businessAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["BusinessAddress"])
                return instance
            }


            // Decoder for [WhoisResponse]
            Decoders.addDecoder(clazz: [WhoisResponse].self) { (source: AnyObject) -> [WhoisResponse] in
                return Decoders.decode(clazz: [WhoisResponse].self, source: source)
            }
            // Decoder for WhoisResponse
            Decoders.addDecoder(clazz: WhoisResponse.self) { (source: AnyObject) -> WhoisResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WhoisResponse()
                instance.validDomain = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ValidDomain"])
                instance.whoisServer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["WhoisServer"])
                instance.rawTextRecord = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RawTextRecord"])
                instance.createdDt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["CreatedDt"])
                return instance
            }
        }
    }
}
