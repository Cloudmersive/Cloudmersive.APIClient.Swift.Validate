//
// FullEmailValidationResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Full email addresss validation result */
public class FullEmailValidationResponse: JSONEncodable {
    /** True if the email address is valid overall, false otherwise */
    public var validAddress: Bool?
    /** Email server connected to for verification */
    public var mailServerUsedForValidation: String?
    /** True if the syntax of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one. */
    public var validSyntax: Bool?
    /** True if the domain name of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one. */
    public var validDomain: Bool?
    /** True if the email address was verified by the remote server, false otherwise.  This is one component of ValidAddress, but not the only one. */
    public var validSMTP: Bool?
    /** True if the domain is a catch-all domain name, false otherwise.  Catch-all domain names, while rare, always accept inbound email to ensure they do not lose any potentially useful emails.  Catch-all domain names can occassionally be configured to first accept and store all inbound email, but then later send a bounce email back to the sender after a delayed period of time. */
    public var isCatchallDomain: Bool?
    /** Domain name of the email address */
    public var domain: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["ValidAddress"] = self.validAddress
        nillableDictionary["MailServerUsedForValidation"] = self.mailServerUsedForValidation
        nillableDictionary["Valid_Syntax"] = self.validSyntax
        nillableDictionary["Valid_Domain"] = self.validDomain
        nillableDictionary["Valid_SMTP"] = self.validSMTP
        nillableDictionary["IsCatchallDomain"] = self.isCatchallDomain
        nillableDictionary["Domain"] = self.domain
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
